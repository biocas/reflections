What happens when you initialize a repository? Why do you need to do it?
Git creates a hidden directory which will store commits/older versions of my files.
The repository will track my files and save all the commits I've made.

How is the staging area different from the working directory and the repository? What value do you think it offers?
It's an intermediate are which adds flexibility in terms of what to commit.
This way you can choose which files to commit together.

How can you use the staging area to make sure you have one commit per logical change?
Sometimes one logical change includes more than one file.
You can include two files in the same commit with the staging area.
You can also use git diff and git diff --staged to se if the differences are in fact logical.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When you add different directions to the project.
Such as different languges, different versions of the same file or when you just want do experiment a new feature without ruining the code.
Branches help to add new features while having a master branch that should contain the core of your project.

How do the diagrams help you visualize the branch structure?
Visual representation, specially on paper, always helps organizing the project in your head.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Changes made in both branches get included in the same branch/same file. They are represented in the diagram in a graph that shows how the branches diverge.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros of automatic merging are the time saving and easiness of the process, cons can be jeopardizing conflicts.
Doing merges manually can take more time but it gives you the authority to decide what changes to merge into the same commit.